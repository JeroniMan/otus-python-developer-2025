[project]
name = "homework-11"
version = "0.1.0"
description = "OTUS Python Pro Homework 11: Logistic Regression Implementation"
authors = [
    { name = "German Kovalev", email = "german.n.kovalevgmail.com" }
]
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = ["machine-learning", "logistic-regression", "nlp", "sentiment-analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=2.0.0",
    "scipy>=1.14.0",
    "pandas>=2.2.0",
    "scikit-learn>=1.5.0",
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "tqdm>=4.66.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.2.0",
    "ipywidgets>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-mock>=3.14.0",
    "black>=24.4.0",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
    "bandit>=1.7.0",
    "safety>=3.2.0",
    "ipdb>=0.13.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
]

all = [
    "homework-11[dev,docs]",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/homework-11"
"Bug Tracker" = "https://github.com/yourusername/homework-11/issues"
"Documentation" = "https://yourusername.github.io/homework-11"
"Source Code" = "https://github.com/yourusername/homework-11"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["dmia"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.0",
    "black>=24.4.0",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
]

[tool.uv.sources]
homework-11 = { path = ".", editable = true }

[tool.ruff]
line-length = 88
target-version = "py312"
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "ARG002"]
"notebooks/*" = ["E402", "F401"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | notebooks
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=dmia",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks integration tests",
    "unit: marks unit tests",
]

[tool.coverage.run]
source = ["dmia"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
ignore_errors = true
precision = 2
show_missing = true

[tool.bandit]
exclude_dirs = ["tests", "notebooks"]
severity = "medium"
confidence = "medium"