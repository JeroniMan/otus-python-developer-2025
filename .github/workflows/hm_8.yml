name: HM_8 Django CI

on:
  push:
    branches: [ main ]
    paths:
      - 'hm_8/**'
      - '.github/workflows/hm_8.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'hm_8/**'
      - '.github/workflows/hm_8.yml'

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.7.1'

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hm_8

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: hm_8/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run Black
      run: poetry run black --check mysite/

    - name: Run isort
      run: poetry run isort --check-only mysite/

    - name: Run flake8
      run: poetry run flake8 mysite/ --exclude=migrations,settings.py

    - name: Run mypy
      run: poetry run mypy mysite/ --exclude migrations
      continue-on-error: true  # MyPy can be strict, allow failures initially

  test:
    name: Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hm_8

    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        django-version: ['4.2', '5.0']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: hm_8/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root
        poetry add django@~${{ matrix.django-version }} --no-interaction

    - name: Install project
      run: poetry install --no-interaction

    - name: Run migrations check
      run: |
        cd mysite
        poetry run python manage.py makemigrations --check --dry-run

    - name: Run Django tests
      run: |
        cd mysite
        poetry run python manage.py test polls -v 2

    - name: Run pytest with coverage
      run: |
        poetry run pytest mysite/ --cov=mysite --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./hm_8/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hm_8

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run Bandit security linter
      run: poetry run bandit -r mysite/ -x '*/migrations/*,*/tests/*' -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: hm_8/bandit-report.json

    - name: Check for known vulnerabilities
      run: poetry run safety check --json
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hm_8

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t django-polls:test .

    - name: Run Docker container test
      run: |
        docker run -d -p 8000:8000 --name test-container django-polls:test
        sleep 10
        curl -f http://localhost:8000/polls/ || exit 1
        docker stop test-container
        docker rm test-container

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: django-polls:test
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy (Placeholder)
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to staging
      run: |
        echo "This is where deployment would happen"
        echo "For example: deploy to Heroku, AWS, or DigitalOcean"

    - name: Notify deployment
      run: |
        echo "Deployment completed successfully"