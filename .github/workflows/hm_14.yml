# .github/workflows/ci.yml
name: CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'hm_14/**'
      - '.github/workflows/hm_14.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'hm_14/**'
      - '.github/workflows/hm_14.yml'

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: '0.4.10'
  MEMCACHED_VERSION: '1.6.21'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run Ruff
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Run Black
        run: uv run black --check .

      - name: Run Flake8
        run: uv run flake8 . --max-line-length=88 --extend-ignore=E203
        continue-on-error: true

      - name: Run mypy
        run: uv run mypy memc_load.py --ignore-missing-imports
        continue-on-error: true

  test:
    name: Test (${{ matrix.os }} / Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    services:
      memcached:
        image: memcached:${{ env.MEMCACHED_VERSION }}
        ports:
          - 33013:11211
          - 33014:11211
          - 33015:11211
          - 33016:11211
        options: >-
          --health-cmd "echo stats | nc localhost 11211"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Only run on Linux
        if: matrix.os == 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install Memcached (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install memcached
          brew services start memcached

      - name: Install Memcached (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows memcached setup would go here
          # For now, skip memcached tests on Windows
          echo "Memcached tests skipped on Windows"

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run unit tests
        run: |
          uv run python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term

      - name: Run integration test with sample data
        if: matrix.os == 'ubuntu-latest'
        run: |
          uv run python memc_load.py --dry --pattern="tests/fixtures/*.tsv.gz" --test

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  protobuf-check:
    name: Protocol Buffers Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install protoc
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v24.4/protoc-24.4-linux-x86_64.zip
          unzip protoc-24.4-linux-x86_64.zip -d $HOME/protoc
          echo "$HOME/protoc/bin" >> $GITHUB_PATH

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Generate protobuf code
        run: |
          protoc --python_out=. appsinstalled.proto
          mv appsinstalled_pb2.py appsinstalled_pb2_generated.py

      - name: Check protobuf consistency
        run: |
          diff appsinstalled_pb2.py appsinstalled_pb2_generated.py || echo "Protobuf files differ"

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    services:
      memcached:
        image: memcached:latest
        ports:
          - 33013:11211
        options: >-
          --health-cmd "echo stats | nc localhost 11211"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Generate test data
        run: |
          python -c "
          import gzip
          with gzip.open('test_perf.tsv.gz', 'wt') as f:
              for i in range(10000):
                  f.write(f'idfa\ttest{i}\t55.55\t42.42\t1,2,3,4,5\n')
          "

      - name: Run performance test
        run: |
          time uv run python memc_load.py --pattern="test_perf.tsv.gz" --maxworkers=10 --dry

      - name: Check memory usage
        run: |
          /usr/bin/time -v uv run python memc_load.py --pattern="test_perf.tsv.gz" --dry 2>&1 | grep "Maximum resident set size"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run Bandit security linter
        run: uv run bandit -r . -ll -x tests
        continue-on-error: true

      - name: Run safety check
        run: uv run safety check --json
        continue-on-error: true

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint, test, protobuf-check]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: |
          uv build
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: memcache-loader:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --frozen

      - name: Build documentation
        run: |
          uv run mkdocs build || echo "Documentation build skipped"
        continue-on-error: true

      - name: Deploy to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site